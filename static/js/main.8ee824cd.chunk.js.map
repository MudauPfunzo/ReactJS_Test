{"version":3,"sources":["components/navigation.jsx","components/services.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Navigation","props","id","className","href","src","data","logo","alt","type","responsive","superLargeDesktop","breakpoint","max","min","items","desktop","tablet","mobile","Services","useState","currentSlide","setCurrentSlide","swipeable","ssr","infinite","customTransition","containerClass","removeArrowOnDeviceType","dotListClass","itemClass","afterChange","nextSlide","map","d","i","toString","image","title","App","landingPageData","setLandingPageData","useEffect","JsonData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gwBAAaA,EAAa,SAACC,GACzB,OACE,qBACEC,GAAG,OACHC,UAAU,+EAFZ,SAIE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,mBAAGA,UAAU,eAAeC,KAAK,IAAjC,SACE,qBACEC,IAAKJ,EAAMK,KAAOL,EAAMK,KAAKC,KAAO,GACpCC,IAAI,WACJL,UAAU,eAET,IACL,wBACEA,UAAU,iBACVM,KAAK,SACL,cAAY,WACZ,cAAY,0BACZ,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASE,sBAAMN,UAAU,6BAIpB,sBAAKA,UAAU,2BAA2BD,GAAG,yBAA7C,UACE,qBAAIC,UAAU,qBAAd,UACE,oBAAIA,UAAU,WAAd,SACE,mBAAGC,KAAK,SAASD,UAAU,WAA3B,qBAIF,oBAAIA,UAAU,WAAd,SACE,mBAAGC,KAAK,kBAAkBD,UAAU,WAApC,mCAIF,oBAAIA,UAAU,WAAd,SACE,mBAAGC,KAAK,eAAeD,UAAU,WAAjC,iCAKJ,oBAAIA,UAAU,8BAAd,SACE,oBAAIA,UAAU,WAAd,SACE,oBAAGC,KAAK,YAAYD,UAAU,WAA9B,UACE,sBAAMA,UAAU,SAAhB,oBADF,2B,gBC5CRO,G,MAAa,CACjBC,kBAAmB,CAEjBC,WAAY,CAAEC,IAAK,IAAMC,IAAK,KAC9BC,MAAO,GAETC,QAAS,CACPJ,WAAY,CAAEC,IAAK,IAAMC,IAAK,MAC9BC,MAAO,GAETE,OAAQ,CACNL,WAAY,CAAEC,IAAK,KAAMC,IAAK,KAC9BC,MAAO,GAETG,OAAQ,CACNN,WAAY,CAAEC,IAAK,IAAKC,IAAK,GAC7BC,MAAO,KAUEI,EAAW,SAAClB,GACvB,MAAwCmB,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,OACE,qBAAKpB,GAAG,WAAWC,UAAU,cAA7B,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,6CAEE,sBAAMA,UAAU,YAAhB,+BAGJ,qBAAKA,UAAU,MAAf,SACE,cAAC,IAAD,CACEoB,WAAW,EACXb,WAAYA,EACZc,KAAK,EACLC,UAAU,EACVC,iBAAiB,SACjBC,eAAe,qBACfC,wBAAyB,CAAC,SAAU,UACpCC,aAAa,wBACbC,UAAU,8BACVC,YAAa,SAACC,GAAD,OAAeV,EAAgBU,EAAY,IAV1D,SAYG/B,EAAMK,KACLL,EAAMK,KAAK2B,KAAI,SAACC,EAAGC,GAAJ,OACb,8BACE,qBAAKhC,UAAU,OAAf,SACE,sBACEA,UACEkB,EAAae,YAAcF,EAAEhC,GAAGkC,WAC5B,wBACA,YAJR,UAOE,qBAAK/B,IAAK6B,EAAEG,MAAOlC,UAAU,eAAeK,IAAI,QAChD,mBAAGL,UAAU,YAAb,mBAA6B+B,EAAEI,MAA/B,YAAwCjB,WAV9C,UAAaa,EAAEhC,GAAf,YAAqBiC,OAgBvB,kC,QCjDCI,G,MAdH,WACV,MAA8CnB,mBAAS,IAAvD,mBAAOoB,EAAP,KAAwBC,EAAxB,KAKA,OAJAC,qBAAU,WACRD,EAAmBE,KAClB,IAGD,gCACE,cAAC,EAAD,CAAYrC,KAAMkC,EAAgBxC,aAClC,cAAC,EAAD,CAAUM,KAAMkC,EAAgBrB,gBCNlByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8ee824cd.chunk.js","sourcesContent":["export const Navigation = (props) => {\n  return (\n    <nav\n      id=\"menu\"\n      className=\"navbar navbar-expand-sm navbar-toggleable-sm navbar-default navbar-fixed-top\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-header\">\n          <a className=\"navbar-brand\" href=\"#\">\n            <img\n              src={props.data ? props.data.logo : \"\"}\n              alt=\"MTN logo\"\n              className=\"team-img\"\n            />\n          </a>{\" \"}\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n        </div>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <a href=\"#Store\" className=\"nav-link\">\n                Store\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a href=\"#ProductService\" className=\"nav-link\">\n                Products & Services\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a href=\"#HelpSupport\" className=\"nav-link\">\n                Help & Support\n              </a>\n            </li>\n          </ul>\n          <ul className=\"nav navbar-nav navbar-right\">\n            <li className=\"nav-item\">\n              <a href=\"#Personal\" className=\"nav-link\">\n                <span className=\"marker\">â€¢</span>\n                Personal\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { useState } from \"react\";\nimport Carousel from \"react-multi-carousel\";\nimport \"react-multi-carousel/lib/styles.css\";\n\nconst responsive = {\n  superLargeDesktop: {\n    // the naming can be any, depends on you.\n    breakpoint: { max: 4000, min: 3000 },\n    items: 5,\n  },\n  desktop: {\n    breakpoint: { max: 3000, min: 1024 },\n    items: 5,\n  },\n  tablet: {\n    breakpoint: { max: 1024, min: 464 },\n    items: 3,\n  },\n  mobile: {\n    breakpoint: { max: 464, min: 0 },\n    items: 2,\n  },\n};\nconst settings = {\n  dots: true,\n  infinite: true,\n  speed: 500,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n};\nexport const Services = (props) => {\n  const [currentSlide, setCurrentSlide] = useState(3);\n  return (\n    <div id=\"services\" className=\"text-center\">\n      <div className=\"container\">\n        <div className=\"section-title\">\n          <p>\n            What are you\n            <span className=\"bold-span\"> here to do?</span>\n          </p>\n        </div>\n        <div className=\"row\">\n          <Carousel\n            swipeable={false}\n            responsive={responsive}\n            ssr={true} // means to render carousel on server-side.\n            infinite={true}\n            customTransition=\"all .5\"\n            containerClass=\"carousel-container\"\n            removeArrowOnDeviceType={[\"tablet\", \"mobile\"]}\n            dotListClass=\"custom-dot-list-style\"\n            itemClass=\"carousel-item-padding-40-px\"\n            afterChange={(nextSlide) => setCurrentSlide(nextSlide - 1)}\n          >\n            {props.data ? (\n              props.data.map((d, i) => (\n                <div key={`${d.id}-${i}`}>\n                  <div className=\"card\">\n                    <div\n                      className={\n                        currentSlide.toString() == d.id.toString()\n                          ? \"card-body highlighted\"\n                          : \"card-body\"\n                      }\n                    >\n                      <img src={d.image} className=\"card-img-top\" alt=\"...\" />\n                      <p className=\"card-text\">{`${d.title}-${currentSlide}`}</p>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div></div>\n            )}\n          </Carousel>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { Navigation } from \"./components/navigation\";\n\nimport { Services } from \"./components/services\";\n\nimport JsonData from \"./data/data.json\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [landingPageData, setLandingPageData] = useState({});\n  useEffect(() => {\n    setLandingPageData(JsonData);\n  }, []);\n\n  return (\n    <div>\n      <Navigation data={landingPageData.Navigation} />\n      <Services data={landingPageData.Services} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}